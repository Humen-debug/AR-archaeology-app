diff --git a/node_modules/expo-three-orbit-controls/build/OrbitControls.d.ts b/node_modules/expo-three-orbit-controls/build/OrbitControls.d.ts
index be2f5eb..357f965 100644
--- a/node_modules/expo-three-orbit-controls/build/OrbitControls.d.ts
+++ b/node_modules/expo-three-orbit-controls/build/OrbitControls.d.ts
@@ -10,6 +10,7 @@
  * @author ScieCode / http://github.com/sciecode
  */
 import { EventDispatcher, MOUSE, TOUCH, Vector3, Camera } from 'three';
+
 export declare class OrbitControls extends EventDispatcher {
     object: Camera & {
         fov: number;
@@ -21,7 +22,7 @@ export declare class OrbitControls extends EventDispatcher {
         updateProjectionMatrix: () => void;
         isOrthographicCamera?: boolean;
         isPerspectiveCamera?: boolean;
-    };
+    } ;
     enabled: boolean;
     target: Vector3;
     minDistance: number;
@@ -96,7 +97,33 @@ export declare class OrbitControls extends EventDispatcher {
         updateProjectionMatrix: () => void;
         isOrthographicCamera?: boolean;
         isPerspectiveCamera?: boolean;
-    }, ref?: any);
+    }, ref?: any,
+    props?: {
+        enabled: boolean;
+        target?: Vector3;
+        minDistance?: number;
+        maxDistance?: number;
+        minZoom?: number;
+        maxZoom?: number;
+        minPolarAngle?: number;
+        maxPolarAngle?: number;
+        minAzimuthAngle?: number;
+        maxAzimuthAngle?: number;
+        enableDamping?: boolean;
+        dampingFactor?: number;
+        enableZoom?: boolean;
+        zoomSpeed?: number;
+        enableRotate?: boolean;
+        rotateSpeed?: number;
+        enablePan?: boolean;
+        panSpeed?: number;
+        screenSpacePanning?: boolean;
+        keyPanSpeed?: number;
+        autoRotate?: boolean;
+        autoRotateSpeed?: number;
+        enableKeys?: boolean;
+        },
+    );
     getPolarAngle: () => number;
     getAzimuthalAngle: () => number;
     saveState: () => void;
diff --git a/node_modules/expo-three-orbit-controls/build/OrbitControls.js b/node_modules/expo-three-orbit-controls/build/OrbitControls.js
index 5540eb2..f1885d6 100644
--- a/node_modules/expo-three-orbit-controls/build/OrbitControls.js
+++ b/node_modules/expo-three-orbit-controls/build/OrbitControls.js
@@ -31,47 +31,47 @@ const STATE = {
 const EPS = 0.000001;
 const useDOM = false;
 export class OrbitControls extends EventDispatcher {
-    constructor(object, ref) {
+    constructor(object, ref, props) {
         super();
         this.object = object;
         // Set to false to disable this control
-        this.enabled = true;
+        this.enabled =  props.enabled || true;
         // "target" sets the location of focus, where the object orbits around
         this.target = new Vector3();
         // How far you can dolly in and out ( PerspectiveCamera only )
-        this.minDistance = 0;
-        this.maxDistance = Infinity;
+        this.minDistance = props.minDistance || 0;
+        this.maxDistance = props.maxDistance || Infinity;
         // How far you can zoom in and out ( OrthographicCamera only )
-        this.minZoom = 0;
-        this.maxZoom = Infinity;
+        this.minZoom = props.minZoom || 0;
+        this.maxZoom = props.maxZoom || Infinity;
         // How far you can orbit vertically, upper and lower limits.
         // Range is 0 to Math.PI radians.
-        this.minPolarAngle = 0; // radians
-        this.maxPolarAngle = Math.PI; // radians
+        this.minPolarAngle = props.minPolarAngle || 0; // radians
+        this.maxPolarAngle = props.maxPolarAngle|| Math.PI; // radians
         // How far you can orbit horizontally, upper and lower limits.
         // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].
         this.minAzimuthAngle = -Infinity; // radians
         this.maxAzimuthAngle = Infinity; // radians
         // Set to true to enable damping (inertia)
         // If damping is enabled, you must call controls.update() in your animation loop
-        this.enableDamping = false;
-        this.dampingFactor = 0.05;
+        this.enableDamping = props.enableDamping|| false;
+        this.dampingFactor = props.dampingFactor || 0.05;
         // This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
         // Set to false to disable zooming
-        this.enableZoom = true;
-        this.zoomSpeed = 1.0;
+        this.enableZoom = props.enableZoom ||  true;
+        this.zoomSpeed = props.zoomSpeed || 1.0;
         // Set to false to disable rotating
-        this.enableRotate = true;
-        this.rotateSpeed = 1.0;
+        this.enableRotate = props.enableRotate || true;
+        this.rotateSpeed = props.rotateSpeed || 1.0;
         // Set to false to disable panning
-        this.enablePan = true;
-        this.panSpeed = 1.0;
+        this.enablePan = props.enablePan || false;
+        this.panSpeed = props.panSpeed || 1.0;
         this.screenSpacePanning = false; // if true, pan in screen-space
         this.keyPanSpeed = 7.0; // pixels moved per arrow key push
         // Set to true to automatically rotate around the target
         // If auto-rotate is enabled, you must call controls.update() in your animation loop
-        this.autoRotate = false;
-        this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60
+        this.autoRotate = props.autoRotate || false;
+        this.autoRotateSpeed = props.autoRotateSpeed || 2.0; // 30 seconds per round when fps is 60
         // Set to false to disable use of the keys
         this.enableKeys = true;
         // The four arrow keys
@@ -354,6 +354,8 @@ export class OrbitControls extends EventDispatcher {
             const dx = touches[0].pageX - touches[1].pageX;
             const dy = touches[0].pageY - touches[1].pageY;
             const distance = Math.sqrt(dx * dx + dy * dy);
+            // fix: scale went infinity/zero/Nan when distance is zero
+            if (distance === 0) return;
             this.dollyEnd.set(0, distance);
             this.dollyDelta.set(0, this.dollyEnd.y / this.dollyStart.y ** this.zoomSpeed);
             this.dollyIn(this.dollyDelta.y);
@@ -515,6 +517,7 @@ export class OrbitControls extends EventDispatcher {
             if (this.enabled === false)
                 return;
             (_b = (_a = event).preventDefault) === null || _b === void 0 ? void 0 : _b.call(_a);
+            
             switch (event.touches.length) {
                 case 1:
                     switch (this.touches.ONE) {
@@ -534,6 +537,7 @@ export class OrbitControls extends EventDispatcher {
                             this.state = STATE.NONE;
                     }
                     break;
+                // multi touches not working on granted start
                 case 2:
                     switch (this.touches.TWO) {
                         case TOUCH.DOLLY_PAN:
@@ -631,7 +635,7 @@ export class OrbitControls extends EventDispatcher {
             const offset = new Vector3();
             // so camera.up is the orbit axis
             const quat = new Quaternion().setFromUnitVectors(this.object.up, new Vector3(0, 1, 0));
-            const quatInverse = quat.clone().inverse();
+            const quatInverse = quat.clone().invert();
             const lastPosition = new Vector3();
             const lastQuaternion = new Quaternion();
             return () => {
diff --git a/node_modules/expo-three-orbit-controls/build/OrbitControlsView.d.ts b/node_modules/expo-three-orbit-controls/build/OrbitControlsView.d.ts
index b5af5a2..71dc79b 100644
--- a/node_modules/expo-three-orbit-controls/build/OrbitControlsView.d.ts
+++ b/node_modules/expo-three-orbit-controls/build/OrbitControlsView.d.ts
@@ -2,6 +2,29 @@ import { ViewProps } from 'react-native';
 import { Camera } from 'three';
 export declare type OrbitControlsViewProps = {
     camera: null | Camera;
+    enabled?: boolean;
+    target?: Vector3;
+    minDistance?: number;
+    maxDistance?: number;
+    minZoom?: number;
+    maxZoom?: number;
+    minPolarAngle?: number;
+    maxPolarAngle?: number;
+    minAzimuthAngle?: number;
+    maxAzimuthAngle?: number;
+    enableDamping?: boolean;
+    dampingFactor?: number;
+    enableZoom?: boolean;
+    zoomSpeed?: number;
+    enableRotate?: boolean;
+    rotateSpeed?: number;
+    enablePan?: boolean;
+    panSpeed?: number;
+    screenSpacePanning?: boolean;
+    keyPanSpeed?: number;
+    autoRotate?: boolean;
+    autoRotateSpeed?: number;
+    enableKeys?: boolean;
 } & ViewProps;
 declare const OrbitControlsView: any;
 export default OrbitControlsView;
diff --git a/node_modules/expo-three-orbit-controls/build/OrbitControlsView.js b/node_modules/expo-three-orbit-controls/build/OrbitControlsView.js
index c1c0d43..e303512 100644
--- a/node_modules/expo-three-orbit-controls/build/OrbitControlsView.js
+++ b/node_modules/expo-three-orbit-controls/build/OrbitControlsView.js
@@ -13,6 +13,8 @@ function polyfillEventTouches(nativeEvent) {
     }
     return nativeEvent;
 }
+
+const TOUCH_THRESHOLD = 20;
 const OrbitControlsView = React.forwardRef(({ camera, ...props }, ref) => {
     var _a;
     const [size, setSize] = React.useState(null);
@@ -20,7 +22,7 @@ const OrbitControlsView = React.forwardRef(({ camera, ...props }, ref) => {
     const controls = React.useMemo(() => {
         var _a;
         if (camera && ((_a = viewRef) === null || _a === void 0 ? void 0 : _a.current)) {
-            return new OrbitControls(camera, viewRef.current);
+            return new OrbitControls(camera, viewRef.current, props);
         }
         return null;
     }, [camera, (_a = viewRef) === null || _a === void 0 ? void 0 : _a.current]);
@@ -42,12 +44,22 @@ const OrbitControlsView = React.forwardRef(({ camera, ...props }, ref) => {
             return (_a = controls) === null || _a === void 0 ? void 0 : _a.onTouchEnd(polyfill);
         }
         return PanResponder.create({
-            onStartShouldSetPanResponder: (evt, gestureState) => true,
-            onStartShouldSetPanResponderCapture: (evt, gestureState) => true,
+            onStartShouldSetPanResponder: (evt, gestureState) => {
+                // fix multi touchs are not detected on start by adding little "delay" 
+                // in sensing touchs
+                const { dx, dy } = gestureState;
+                return (Math.abs(dx) > TOUCH_THRESHOLD) || (Math.abs(dy) > TOUCH_THRESHOLD);
+                
+            },
+            onStartShouldSetPanResponderCapture: (evt, gestureState) => {
+                const { dx, dy } = gestureState;
+                return (Math.abs(dx) > TOUCH_THRESHOLD) || (Math.abs(dy) > TOUCH_THRESHOLD);
+            },
             onMoveShouldSetPanResponder: (evt, gestureState) => true,
             onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,
-            onPanResponderGrant({ nativeEvent }) {
+            onPanResponderGrant({ nativeEvent }, gestureState) {
                 var _a;
+                console.log(gestureState.numberActiveTouches)
                 return (_a = controls) === null || _a === void 0 ? void 0 : _a.onTouchStart(nativeEvent);
             },
             onPanResponderMove({ nativeEvent }) {
